{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"weekly widgets/","text":"widgets Many widgets has the same effect as a css property in web technoledge. To make an element has some opacity, in css, we just add a property: opacity: 0.3 , and in flutter, we use a widget Opacity , and if we want the opacity to animate, we use AnimatedOpacity . The widgets are shorthand ??","title":"widgets"},{"location":"weekly widgets/#widgets","text":"Many widgets has the same effect as a css property in web technoledge. To make an element has some opacity, in css, we just add a property: opacity: 0.3 , and in flutter, we use a widget Opacity , and if we want the opacity to animate, we use AnimatedOpacity . The widgets are shorthand ??","title":"widgets"},{"location":"weekly widgets/AnimatedContainer/","text":"AnimatedContainer AnimatedContainer , many properties of the widget can be animated, if re-rendered caused by i.e. setState , width height borderRadius color Compare with css : | property | css property| | duration | transition |","title":"AnimatedContainer"},{"location":"weekly widgets/AnimatedContainer/#animatedcontainer","text":"AnimatedContainer , many properties of the widget can be animated, if re-rendered caused by i.e. setState , width height borderRadius color Compare with css : | property | css property| | duration | transition |","title":"AnimatedContainer"},{"location":"weekly widgets/SafeArea/","text":"SafeArea SafeArea will place its content in an area which will ensure the content not be hidden by the physical size of device, i.e. screen round corner, system status bar.","title":"SafeArea"},{"location":"weekly widgets/SafeArea/#safearea","text":"SafeArea will place its content in an area which will ensure the content not be hidden by the physical size of device, i.e. screen round corner, system status bar.","title":"SafeArea"},{"location":"weekly widgets/TabBar/","text":"TabBar To create tabs layout, use a DefaultTabController is the most easy way: DefaultTabController( length: 3, child: Scaffold( body: Column( children: <Widget>[ color: Colors.indigoAccent, child: TabBar( labelColor: Colors.white, indicatorColor: Colors.red, tabs: [ Tab( text: 'sliver list', ), Tab(text: 'grid'), Tab(text: 'lazily') ]), ), Expanded( child: TabBarView( children: <Widget>[ Tab3List(), Tab3List(), Tab3List(), ], ), ) ], )) ) keep tab page state When switch between the tabs, the active tab page will be re-rendered. If we want to keep the state of tab page, we can extract the page to a new class and implements AutomaticKeepAliveClientMixin mixin: class _Tab3State<Tab3List> extends State with AutomaticKeepAliveClientMixin { @override // TODO: implement wantKeepAlive bool get wantKeepAlive => true; @override Widget build(BuildContext context) { super.build(context); // TODO: implement build return CustomScrollView( slivers: <Widget>[ SliverList( delegate: SliverChildBuilderDelegate( (context, index) => createListTile(index.toString())), ) ], ); } }","title":"TabBar"},{"location":"weekly widgets/TabBar/#tabbar","text":"To create tabs layout, use a DefaultTabController is the most easy way: DefaultTabController( length: 3, child: Scaffold( body: Column( children: <Widget>[ color: Colors.indigoAccent, child: TabBar( labelColor: Colors.white, indicatorColor: Colors.red, tabs: [ Tab( text: 'sliver list', ), Tab(text: 'grid'), Tab(text: 'lazily') ]), ), Expanded( child: TabBarView( children: <Widget>[ Tab3List(), Tab3List(), Tab3List(), ], ), ) ], )) )","title":"TabBar"},{"location":"weekly widgets/TabBar/#keep-tab-page-state","text":"When switch between the tabs, the active tab page will be re-rendered. If we want to keep the state of tab page, we can extract the page to a new class and implements AutomaticKeepAliveClientMixin mixin: class _Tab3State<Tab3List> extends State with AutomaticKeepAliveClientMixin { @override // TODO: implement wantKeepAlive bool get wantKeepAlive => true; @override Widget build(BuildContext context) { super.build(context); // TODO: implement build return CustomScrollView( slivers: <Widget>[ SliverList( delegate: SliverChildBuilderDelegate( (context, index) => createListTile(index.toString())), ) ], ); } }","title":"keep tab page state"}]}